---
import { getCollection } from "astro:content";
import { Picture } from "astro:assets";
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";
import Navbar from "@components/navbar/navbar.astro";
import { getLangFromUrl, useTranslation } from "i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslation(lang);

// Filter blog entries with 'draft: false' & date before current date
const publishedBlogEntries = await getCollection("blog", ({ data }) => {
  return !data.draft && data.publishDate < new Date();
});

// Sort content entries by publication date
publishedBlogEntries.sort(function (a, b) {
  return b.data.publishDate.valueOf() - a.data.publishDate.valueOf();
});

const filteredBlogEntries = publishedBlogEntries.filter(entry => entry.data.lang === lang);

// const postsPerPage = 1;
// const currentPage = parseInt(Astro.url.searchParams.get('page') || '1', 10);
// const startIndex = (currentPage - 1) * postsPerPage;
// const endIndex = startIndex + postsPerPage;
// const paginatedPosts = publishedBlogEntries.slice(startIndex, endIndex);

// const totalPages = Math.ceil(publishedBlogEntries.length / postsPerPage);

// function generatePageLink(pageNumber) {
//   return `?page=${pageNumber}`;
// }

function formatDate(date) {
  return new Intl.DateTimeFormat(lang, {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric',
    second: 'numeric'
  }).format(date);
}
---

<Navbar />
<main class="container mx-auto mb-20 mt-10">
  <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
    {
      filteredBlogEntries.map((blogPostEntry, index) => (
        <li class="h-full">
          <a href={lang === 'en' ? `/blog/${blogPostEntry.slug}` : `/es/blog/${blogPostEntry.slug}`} class="block p-4 border border-gray-200 rounded-lg h-full flex flex-col justify-between">
            <Picture
              src={blogPostEntry.data.image.src}
              alt={blogPostEntry.data.image.alt}
              sizes="(max-width: 800px) 100vw, 800px"
              width={200}
              height={600}
              loading={index <= 2 ? "eager" : "lazy"}
              decoding={index <= 2 ? "sync" : "async"}
              class="w-full h-52 rounded-md object-center bg-white"
            />
            <div class="h-full flex flex-col">
              {/* <span class="text-blue-400 uppercase tracking-wider text-sm font-medium">
                {blogPostEntry.data.category}
              </span> */}

              <h2 class="text-xl font-semibold leading-snug tracking-tight mt-1">
                {blogPostEntry.data.title}
              </h2>

              <div class="flex gap-2 mb-3">
                {/* <span class="text-gray-400">{blogPostEntry.data.author}</span> */}
                <time
                  class="text-gray-400"
                  datetime={blogPostEntry.data.publishDate.toISOString()}>
                  {formatDate(blogPostEntry.data.publishDate)}
                </time>
              </div>
              <div class="flex items-end h-full">
                <span class="text-blue-500">{t('blog.read')} Â»</span>
              </div>
            </div>
          </a>
        </li>
      ))
    }
  </ul>
<!-- 
  <div class="flex justify-between mt-4">
    {currentPage > 1 && (
      <a href={generatePageLink(currentPage - 1)} class="px-4 py-2 bg-gray-200 rounded">
        Anterior
      </a>
    )}
    {currentPage < totalPages && (
      <a href={generatePageLink(currentPage + 1)} class="px-4 py-2 bg-gray-200 rounded">
        Siguiente
      </a>
    )}
  </div> -->
</main>

