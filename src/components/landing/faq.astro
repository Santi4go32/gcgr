---
// @ts-ignore
import { Icon } from "astro-icon/components";
import { Picture } from "astro:assets";
import lupa from "assets/lupa.png";

import { getLangFromUrl,useTranslation } from "i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslation(lang);

---

<div id="contact"  style="visibility: hidden"></div>
<div class="w-full text-[#0E1B4D] mb-[7%]"> 
  <div class="grid grid-cols-1 md:grid-cols-3 gap-16 lg:w-full flex flex-col lg:flex-row">
    <form id="messageForm" class="flex flex-col gap-4 md:col-span-1 lg:col-span-1">
      <h3 class="text-4xl font-bold mb-4 fade-up">{t('faq.title')}</h3>
      <p class="mb-6 text-gray-400 fade-up">{t('faq.subtitle1')}</p>

      <label for="email" class="font-semibold fade-up">{t('faq.label1')}</label>
      <input type="email" id="email" name="email" placeholder={t('faq.input1')} class="p-3 border border-[2px] border-gray-300 bg-transparent rounded-3xl focus:outline-none focus:ring-2 focus:ring-blue-500 fade-up" required />

      <label for="message" class="font-semibold fade-up">{t('faq.label2')}</label>
      <textarea id="message" name="message" placeholder={t('faq.input2')} class="p-3 border border-[2px] border-gray-300 bg-transparent rounded-xl max-h-[150px] min-h-[150px] focus:outline-none focus:ring-2 focus:ring-blue-500 fade-up" required></textarea>

      <label for="name" class="font-semibold fade-up">{t('faq.label3')}</label>
      <div class="flex flex-row w-full fade-up">
        <input type="text" id="name" name="firstname" placeholder={t('faq.input3')} class="w-full p-3 border border-[2px] border-gray-300 bg-transparent rounded-3xl focus:outline-none focus:ring-2 focus:ring-blue-500" required />
        <button type="submit" class="bg-[#0E1B4D] text-white p-3 px-6 ml-2 rounded-3xl hover:bg-blue-700 transition-colors">{t('faq.button')}</button>
      </div>
    </form>

    <!-- <div>
      <h4 class="text-4xl font-bold mb-9 fade-up">{t('faq.title2')}</h4>
      <p class="mb-3 font-medium fade-up"><i class="fa fa-phone mr-4" style="transform: rotate(90deg);"></i>+1 (844) 844-0121</p>
      <p class="mb-3 font-medium fade-up"><i class="fa fa-phone mr-4" style="transform: rotate(90deg);"></i>+1 (407) 705-2655</p>
      <p class="mb-3 font-medium fade-up"><i class="fa fa-envelope mr-4"></i>info@capitalfund.com</p>

      <div class="flex bg-gray-300 rounded-full w-full h-0.5 mt-5 fade-up"></div>

      <h4 class="text-xl font-semibold mt-12 fade-up">{t('faq.social')}</h4>
      <div class="flex flex-col space-y-4 mt-3">
        <a href="https://www.facebook.com/QQCapitalFund" target="_blank" rel="noopener noreferrer" class="text-gray-400 hover:underline fade-up"><i class="fab fa-facebook mr-4 text-[#0E1B4D]"></i>Facebook</a>
        <a href="https://www.instagram.com/qqcapitalfund_es/" target="_blank" rel="noopener noreferrer" class="text-gray-400 hover:underline fade-up"><i class="fab fa-instagram mr-4 text-[#0E1B4D]"></i>Instagram</a>
        <a href="https://www.linkedin.com/company/qqcapitalinvestmentfund/mycompany/" target="_blank" rel="noopener noreferrer" class="text-gray-400 hover:underline fade-up"><i class="fab fa-linkedin mr-4 text-[#0E1B4D]"></i>LinkedIn</a>
      </div>
    </div> -->

    <div class="w-full h-auto md:col-span-2 lg:col-span-2" id="map"></div>
  </div>
</div>

<script>
  window.initMap = function() {
    const initialCenter = { lat: 33.6597, lng: -77.5875};

    const map = new google.maps.Map(document.getElementById("map"), {
      center: initialCenter,
      zoom: 4,
      mapId: "DEMO_MAP_ID",
      restriction: {
        latLngBounds: {
          north: 50,
          south: 20,
          west: -100,
          east: -60,
        },
      }
    });

    const addresses = [
      "80 Broad St, New York, NY 10004, EE. UU",
      "111 E Monument Ave, Kissimmee, FL 34741",
      "3350 SW 148th Ave Suite 110, Miramar, FL 33027, Estados Unidos",
      "John Hancock Center, 875 N Michigan Ave 31st floor, Chicago, IL 60611",
      "191 Peachtree Rd NE 14th floor, Atlanta, GA 30303"
    ];

    const geocoder = new google.maps.Geocoder();

    addresses.forEach((address, index) => {
      geocoder.geocode({ address: address }, (results, status) => {
        if (status === "OK" && results[0]) {
          const location = results[0].geometry.location;
          const marker = new google.maps.marker.AdvancedMarkerElement({
            position: location,
            map: map,
          });

          const infoWindow = new google.maps.InfoWindow({
            content: `<div>${results[0].formatted_address}</div>`,
          });

          marker.addListener("click", () => {
            infoWindow.open({
              anchor: marker,
              map,
              shouldFocus: false,
            });
            // console.log(`Marker ${index} clicked at: `, results[0].formatted_address);
          });
        } else {
          console.error("Geocode was not successful for the following reason: " + status);
        }
      });
    });

    // const request = {
    //   placeId: "ChIJp4YBY0il2YgR9ZaQBLrPSC4",
    //   fields: ["name", "reviews"],
    // };

    // const service = new google.maps.places.PlacesService(document.createElement('div')); 

    // service.getDetails(request, (place, status) => {
    //   if (status === google.maps.places.PlacesServiceStatus.OK && place.reviews) {
    //     renderReviews(place.reviews);
    //   } else {
    //     console.error("Error al obtener reseñas:", status);
    //   }
    // });
  }

  // let currentIndex = 0; // Índice del carrusel
  // let reviews = []; // Almacenará las reseñas
  // const autoSlideInterval = 6000; // Tiempo en milisegundos para el desplazamiento automático
  // let intervalId; // Almacena el ID del intervalo

  // // Función para determinar cuántas reseñas mostrar dependiendo del tamaño de la pantalla
  // function getReviewsPerPage() {
  //   if (window.innerWidth < 640) {
  //     return 1;
  //   } else { 
  //     return 3;
  //   }
  // }

  // function renderReviews(reviewsData) {
  //   reviews = reviewsData; // Guardamos las reseñas
  //   const container = document.getElementById("review-cards");
  //   if (container) {
  //     container.innerHTML = ""; // Limpiar contenido previo
  //   }

  //   // Duplicamos las reseñas para crear el efecto de bucle
  //   const allReviews = [...reviewsData, ...reviewsData];

  //   allReviews.forEach((review) => {
  //     const { author_name, profile_photo_url, rating, text, relative_time_description } = review;

  //     const reviewCard = `
  //       <div class="bg-white rounded-lg shadow-lg p-6 w-[600px] flex-shrink-0 mx-2 mb-4">
  //         <div class="flex items-center">
  //           <img src="${profile_photo_url}" alt="profile" class="w-12 h-12 rounded-full mr-4">
  //           <div>
  //             <h4 class="text-lg font-semibold">${author_name}</h4>
  //             <p class="text-gray-500 text-sm">${relative_time_description}</p>
  //           </div>
  //         </div>
  //         <div class="text-yellow-400 my-4">
  //           ${'⭐'.repeat(rating)}
  //         </div>
  //         <p class="text-gray-700">
  //           ${text}
  //         </p>
  //       </div>
  //     `;

  //     // Añadir la tarjeta de reseña al contenedor
  //     if (container) {
  //       container.innerHTML += reviewCard;
  //     }
  //   });

  //   updateCarousel(); // Actualiza el carrusel después de renderizar las reseñas

  //   // Iniciar el desplazamiento automático
  //   intervalId = setInterval(() => {
  //     currentIndex++;
  //     if (currentIndex >= Math.ceil(allReviews.length / getReviewsPerPage())) {
  //       currentIndex = 0; // Volver al inicio
  //     }
  //     updateCarousel();
  //   }, autoSlideInterval);
  // }

  // function updateCarousel() {
  //   const container = document.getElementById("review-cards");
  //   const totalReviews = container ? container.children.length : 0;

  //   // Calcula el desplazamiento del carrusel
  //   const reviewsPerPage = getReviewsPerPage(); // Obtener la cantidad de reseñas a mostrar
  //   const offset = (currentIndex * reviewsPerPage) * (600 + 16); // 300 es el ancho de cada tarjeta y 16 es el margen horizontal
  //   if (container) {
  //     container.style.transform = `translateX(-${offset}px)`;
  //   }
  // }

  // // Manejo de los botones de navegación
  // document.getElementById("prev-button")?.addEventListener("click", () => {
  //   currentIndex--;
  //   if (currentIndex < 0) {
  //     currentIndex = Math.ceil(reviews.length / getReviewsPerPage()) - 1; // Ir al último
  //   }
  //   updateCarousel();
  //   resetAutoSlide(); // Reinicia el intervalo
  // });

  // document.getElementById("next-button")?.addEventListener("click", () => {
  //   currentIndex++;
  //   if (currentIndex >= Math.ceil(reviews.length / getReviewsPerPage())) {
  //     currentIndex = 0; // Volver al inicio
  //   }
  //   updateCarousel();
  //   resetAutoSlide(); // Reinicia el intervalo
  // });

  // function resetAutoSlide() {
  //   clearInterval(intervalId); // Limpiar el intervalo actual
  //   intervalId = setInterval(() => {
  //     currentIndex++;
  //     if (currentIndex >= Math.ceil(reviews.length * 2 / getReviewsPerPage())) { // Ajuste para el efecto de bucle
  //       currentIndex = 0; // Volver al inicio
  //     }
  //     updateCarousel();
  //   }, autoSlideInterval); // Reiniciar el intervalo
  // }
</script>

<script>
    import { useTranslation } from "i18n/utils";

    function getLangFromUrl(pathname) {
      const segments = pathname.split('/');
      return segments[1] || 'en';
    }

    const lang = getLangFromUrl(window.location.pathname);
    const t = useTranslation(lang);

    const form = document.getElementById('messageForm');

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();

      const form = e.target as HTMLFormElement | null;

      if(form){
        const formData = new FormData(form);
        const jsonData: { [key: string]: string } = {};

        formData.forEach((value, key) => {
          jsonData[key] = value as string;
        });

        try {
          const response = await fetch('https://api.hsforms.com/submissions/v3/integration/submit/45958045/38c65760-bb92-486f-9d54-0d20ba23c185', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              fields: Object.keys(jsonData).map(key => ({
                name: key,
                value: jsonData[key]
              }))
            })
          });

          if (response.ok) {
            alert(t('contact.success'));
            form.reset();
          } else {
            alert(t('contact.error'));
          }
        } catch (error) {
          alert(t('contact.error')); 
        }
      }
    });

</script>
